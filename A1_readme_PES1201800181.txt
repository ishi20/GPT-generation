Creation of GPT tree

The tree is made of two structures called node and tree.
The function init_tree() initialises the tree. create_tree() creates the GPT. 
Created a struct called hist which contained details about the level of the node in the tree and a pointer to the actual node. We create an array of pointers to structures. This array will have the details about all the nodes we've already created from the file. This array is used to find the parent of the node you are adding to the tree. In a loop we read a line from stdin and then from each line we count the number of tab spaces to find the level of that node when it is added in the tree.
To add the data to the tree we create the node and then we find the parent of the node from the array of pointers. The parent is the last node in array which has level equal to one less than the level of the child. Once we know the parent following the GPT rules we add it to the left of the parent if it's empty or we make it a sibling by moving to the right of parent->left till we reach the end of the right tree. At the end we free the array of pointers.

Code generation program
The many parts of the program are seperated into many functions. We have functions to print header, main function, while loops etc. We create the code by creating nested switch cases based on the GPT. We traverse the tree in preorder to get the data in the right order. A function parse() is called which calls preorder() which is where the switch statements are printed. In preorder first a function is called which prints the case and the data after which it returns to preorder(), the pointer then  moves to the left subtree and subsequently the right subtree. Every time it moves to the left in the program a new while loop and switch case needs to be printed and when it reaches the end of a right subtree a default case plus the end of while loop is printed. The case numbers are tracked by passing it as a variable in recursion. When pointer moves to the left, 1 is passed through variable case_no and when you recurse right you pass case_no+1. At the end of the parsing of tree return 0 and closing bracket is printed by epilog(). The final function free_tree() deletes the GPT.
 
